ggplot(houseData,mapping=aes(x = rooms,y = rent.amount,fill = city))+
geom_col()
ggplot(houseData,mapping=aes(x = rooms,y = fire.insurance,fill = city))+
geom_col()
outliers<-boxplot(houseData$area,plot = F)$out
houseData[which(houseData$area%in%outliers),]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData
houseData<-na.omit(houseData)
colSums(is.na(houseData))
dim(houseData)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[1]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[14]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[13]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[1]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[2]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[3]
2
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[3]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[2]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[4]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[5]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[6]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[7]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[8]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[9]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[9]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[10]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[11]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[12]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[13]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[2,9,10,11,12]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
houseData[,c(2,9,10,11,12)]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-drop]
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9.10,11,12)]
head(houseData1)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9.10,11,12)]
head(houseData1)
model1<-lm(total~.,data = houseData1)
summary(model)
model1<-lm(total~.,data = houseData1)
summary(model1)
model1<-glm(furniture~.,data = houseData1,family = "binomial")
model1<-glm(furniture~.,data = houseData1,family = "binomial")
summary(model1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-lm(total~.,data = train1,family = "binomial")
summary(model1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
cpred<-predict(model1,data = test1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
test1$cpred<-predict(model1,data = test1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
cpred<-predict(model1,data = test1)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
cpred<-predict(model1,data = test1)
mean(test1$furniture==cpred)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-glm(furniture~.,data = train1,family = "binomial")
summary(model1)
cpred<-predict(model1,data = test1)
table(test1$furniture,cpred)
train1<-houseData[1:890,]
test1<-houseData[891:1400,]
model1<-lm(total~.,data = train1)
summary(model1)
cpred<-predict(model1,data = test1)
mean(test1$furniture,cpred)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData1<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData1<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9.10,11,12)]
head(houseData1)
head(houseData1)
#normalize <- function(x) {
#  return ((x - min(x)) / (max(x) - min(x)))
#}
#houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
#summary(houseData1)
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
summary(houseData1)
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
summary(houseData2)
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
summary(houseData2)
head(houseData2)
#lets first predict if the house is furnished or not
houseData1$furniture<-ifelse(houseData1$furniture=="furnished",1,0)
#lets first predict if the house is furnished or not
houseData1$furniture<-ifelse(houseData1$furniture=="furnished",1,0)
summary(houseData1$furniture)
#lets first predict if the house is furnished or not
houseData1$furniture<-ifelse(houseData1$furniture=="furnished",1,0)
dim(houseData1$furniture)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
glimpse(st)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
glimpse(houseData)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
str(houseData)
#st$gender<-as.factor(st$gender)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
str(houseData)
houseData$furniture<-as.factor(houseData$furniture)
houseData$furniture<-as.factor(houseData$furniture)
str(houseData)
houseData$animal<-ifelse(houseData$animal=="accept",1,0)
houseData$animal<-ifelse(houseData$animal=="accept",1,0)
str(houseData)
traink<-houseData2[1:890,]
traink<-houseData2[1:890,]
head(traink)
testk<-houseData2[891:1400,]
head(traink)
traink_l<-houseData[1:890,8]
traink_l<-houseData[1:890,8]
testk_l<-houseData[891:1400,8]
head(traink_l)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
str(houseData)
tail(houseData)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
str(houseData)
tail(houseData)
dim(houseData$furniture)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="not furnished",1,0)
dim(houseData$furniture)
#lets first predict if the house is furnished or not
houseData1$furniture<-ifelse(houseData$furniture=="furnished",1,0)
dim(houseData$furniture)
#lets first predict if the house is furnished or not
houseData1$furniture<-ifelse(houseData$furniture=="furnished",1,0)
dim(houseData1$furniture)
houseData<-read.csv("houses_to_rent.csv",stringsAsFactors = F,header = T)
head(houseData)
library(ggplot2)
library(dplyr)
library(tidyverse)
dim(houseData)
#check the structure
str(houseData)
colnames(houseData)[which(names(houseData)=="hoa")]<-"Homeowner_association_tax"
str(houseData)
houseData<-houseData[,-1]
str(houseData)
hist(houseData$city)
houseData$city<-as.factor(houseData$city)
str(houseData$city)
library(ggplot2)
ggplot(houseData,aes(city,fill = furniture))+
geom_histogram(stat = "count")+
ggtitle("Check the house distribution in different cities")+
ylab("number of houses in each city")
houseData%>%
group_by(area)%>%
summarise(count = n())%>%
ggplot(houseData,mapping = aes(y = count,x = area))+
geom_point()
summary(houseData$area)
#check on the no rooms
ggplot(houseData,aes(rooms))+
geom_histogram()
hist(houseData$rooms)
houseData%>%
group_by(rooms)%>%
summarise(count = n())%>%
ggplot(houseData,mapping = aes(y = count,x = rooms))+
geom_col()
summary(houseData$rooms)
#check the bathrooms
houseData%>%
group_by(bathroom)%>%
summarise(count = n())%>%
ggplot(houseData,mapping = aes(y = count,x = bathroom),color = "blue")+
geom_col()
houseData%>%
group_by(parking.spaces  )%>%
summarise(count = n())%>%
ggplot(houseData,mapping = aes(y = count,x = parking.spaces  ))+
geom_col()
colSums(is.na(houseData))
summary(houseData$floor)
houseData%>%
group_by(floor)%>%
summarise(count = n())%>%
ggplot(houseData,mapping = aes(reorder(floor,count,FUN = mode),floor))+
geom_col()
ggplot(houseData,mapping = aes(y = count,x =floor,na.rm = TRUE),color = "blue")+
geom_col()
outliers<-boxplot(houseData$area,plot = F)$out
houseData[which(houseData$area%in%outliers),]
str(houseData)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9.10,11,12)]
head(houseData1)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9.10,11,12)]
head(houseData1)
houseData$fire.insurance<-parse_number(houseData$fire.insurance,locale = default_locale())
str(houseData)
houseData$Homeowner_association_tax<-parse_number(houseData$Homeowner_association_tax,locale = default_locale())
str(houseData)
houseData$rent.amount<-parse_number(houseData$rent.amount,locale = default_locale())
str(houseData)
houseData$total<-parse_number(houseData$total,locale = default_locale())
str(houseData)
houseData$property.tax<-parse_number(houseData$property.tax,locale = default_locale())
str(houseData)
glimpse(houseData)
#glimpse(houseData)
str(houseData)
glimpse(houseData)
tail(houseData)
str(houseData)
houseData
houseData$floor<-houseData$floor%>%
replace_na(0)%>%
head(20)
str(houseData)
glimpse(houseData)
tail(houseData)
str(houseData)
houseData
#lets first predict if the house is furnished or not
houseData1$furniture<-ifelse(houseData$furniture=="furnished",1,0)
dim(houseData1$furniture)
#lets first predict if the house is furnished or not
houseData$furniture<-ifelse(houseData$furniture=="furnished",1,0)
dim(houseData1$furniture)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9.10,11,12)]
head(houseData1)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9,10,11,12)]
head(houseData1)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9,10,11,12)]
houseData1$furniture<-as.factor(houseData1$furniture)
head(houseData1)
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8,9)],normalize))
head(houseData1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
houseData2<-as.data.frame(lapply(houseData1[,c(2,3,4,5,8)],normalize))
summary(houseData2)
head(houseData2)
traink_l<-houseData1[1:891,7]
dim(traink_l)
#lets first leave the outliers
#we have to drop some variable
houseData<-houseData
drop<-houseData[,c(2,9,10,11,12)]
houseData1<-houseData[,-c(2,9,10,11,12)]
houseData1$furniture<-as.factor(houseData1$furniture)
head(houseData1)
trainkr<-houseData1[1:891,7]
head(trainkr)
trainkr<-houseData1[1:891,7]
head(trainkr)
testkr<-houseData1[891:1400,7]
head(testkr)
library(class)
library(class)
modelk<-knn(traink,testk,cl = trainkr)
trainkr<-houseData1[1:890,7]
head(trainkr)
testkr<-houseData1[891:1400,7]
head(testkr)
library(class)
modelk<-knn(traink,testk,cl = trainkr)
library(class)
modelk<-knn(traink,testk,cl = trainkr)
summary(modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr)
pred<-predict(modelk,testkr)
library(class)
modelk<-knn(traink,testk,cl = trainkr)
summary(modelk)
table(testkr == )
library(class)
modelk<-knn(traink,testk,cl = trainkr)
summary(modelk)
table(testkr ==modelk )
library(class)
modelk<-knn(traink,testk,cl = trainkr)
summary(modelk)
table(testkr,modelk )
library(class)
modelk<-knn(traink,testk,cl = trainkr)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 5)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 21)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 10)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 15)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 5)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 2)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
library(class)
modelk<-knn(traink,testk,cl = trainkr,k = 4)
summary(modelk)
table(testkr,modelk )
mean(testkr==modelk)
houseData3<-cbind(houseData2,houseData1[7])
houseData3<-cbind(houseData2,houseData1[7])
head(houseData3)
#separate again the training and testing data
train<-houseData3[1:890,]
test<-houseData3[891,1400,]
#separate again the training and testing data
train<-houseData3[1:890,]
test<-houseData3[891,1400,]
?ranger
library(ranger)
model2<-ranger(furniture~.,data = train,num.trees = 500,respect.unordered.factors = "order")
library(ranger)
model2<-ranger(furniture~.,data = train,num.trees = 500,respect.unordered.factors = "order")
pred<-predict(model2,test)
